{"version":3,"sources":["scripts/main.js"],"names":["gameScore","document","querySelector","gameField","startButton","loseMessage","winMessage","startMessage","rows","cells","score","moveScore","moveMade","gameBoard","getRandomTileValue","Math","round","random","getRandomIndex","floor","hasAdjacentTiles","hasAdjacent","r","c","isLoser","hasEmptyTile","classList","remove","removeEventListener","keyHandler","isWinner","some","row","cell","resetBoard","forEach","fill","appendTile","rowIndex","cellIndex","updateTile","tile","cellValue","innerHTML","className","add","updateScore","renderBoard","move","noZerosRow","filter","mergedRow","mergedValue","i","length","push","moveLeft","newRow","movedRow","arraysEqual","moveRight","finalRow","slice","reverse","moveUp","columnIndex","newColumn","column","moveDown","arr1","arr2","keyEvent","keyActions","action","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","code","addEventListener","buttonEvent","target"],"mappings":"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","file":"main.8656af41.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst gameScore = document.querySelector('.game-score');\nconst gameField = document.querySelector('.game-field');\nconst startButton = document.querySelector('.button');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst startMessage = document.querySelector('.message-start');\n\nconst rows = 4;\nconst cells = 4;\nlet score = 0;\nlet moveScore = 0;\nlet moveMade = false;\n\nconst gameBoard = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction getRandomTileValue() {\n  return Math.round(Math.random()) < 0.9 ? 2 : 4;\n}\n\nfunction getRandomIndex() {\n  return Math.floor(Math.random() * 4);\n}\n\nfunction hasAdjacentTiles() {\n  let hasAdjacent = false;\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cells; c++) {\n      if (c < cells - 1 && gameBoard[r][c] === gameBoard[r][c + 1]) {\n        hasAdjacent = true;\n      } else if (r < rows - 1 && gameBoard[r][c] === gameBoard[r + 1][c]) {\n        hasAdjacent = true;\n      }\n    }\n  }\n\n  return hasAdjacent;\n};\n\nfunction isLoser() {\n  if (!hasEmptyTile() && !hasAdjacentTiles()) {\n    loseMessage.classList.remove('hidden');\n    document.removeEventListener('keyup', keyHandler);\n  }\n}\n\nfunction isWinner() {\n  if (gameBoard.some(row => row.some(cell => cell === 2048))) {\n    winMessage.classList.remove('hidden');\n    document.removeEventListener('keyup', keyHandler);\n  }\n}\n\nfunction resetBoard() {\n  gameBoard.forEach(row => row.fill(0));\n}\n\nstartButton.addEventListener('click', (buttonEvent) => {\n  resetBoard();\n  score = 0;\n  moveMade = false;\n\n  startMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n\n  startButton.classList.remove('start');\n  buttonEvent.target.classList.add('restart');\n  startButton.innerHTML = 'Restart';\n\n  document.addEventListener('keyup', keyHandler);\n\n  appendTile();\n  appendTile();\n\n  renderBoard();\n});\n\nfunction hasEmptyTile() {\n  return gameBoard.some(row => row.some(cell => cell === 0));\n}\n\nfunction appendTile() {\n  if (hasEmptyTile()) {\n    let rowIndex, cellIndex;\n\n    do {\n      rowIndex = getRandomIndex();\n      cellIndex = getRandomIndex();\n    } while (gameBoard[rowIndex][cellIndex] !== 0);\n\n    gameBoard[rowIndex][cellIndex] = getRandomTileValue();\n  } else {\n    return null;\n  }\n}\n\nfunction updateTile(tile, cellValue) {\n  tile.innerHTML = '';\n  tile.className = '';\n  tile.classList.add('field-cell');\n\n  if (cellValue > 0) {\n    tile.classList.add(`field-cell--${cellValue}`);\n    tile.innerHTML = cellValue;\n    moveScore += cellValue;\n  }\n\n  updateScore();\n};\n\nfunction updateScore() {\n  gameScore.innerHTML = score;\n}\n\nfunction renderBoard() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cells; c++) {\n      const tile = gameField.rows[r].cells[c];\n      const cellValue = gameBoard[r][c];\n\n      updateTile(tile, cellValue);\n    }\n  }\n}\n\nfunction move(row) {\n  const noZerosRow = row.filter(cell => cell !== 0);\n  const mergedRow = [];\n  let mergedValue = 0;\n\n  for (let i = 0; i < noZerosRow.length; i++) {\n    if (noZerosRow[i] === noZerosRow[i + 1]) {\n      mergedRow.push(noZerosRow[i] * 2);\n      mergedValue += noZerosRow[i] * 2;\n      i++;\n    } else {\n      mergedRow.push(noZerosRow[i]);\n    }\n  }\n\n  while (mergedRow.length < cells) {\n    mergedRow.push(0);\n  }\n\n  score += mergedValue;\n\n  return mergedRow;\n}\n\nfunction moveLeft() {\n  moveMade = false;\n  isWinner();\n  isLoser();\n  moveScore = 0;\n\n  for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n    const newRow = gameBoard[rowIndex];\n\n    const movedRow = move(newRow);\n\n    if (!arraysEqual(newRow, movedRow)) {\n      moveMade = true;\n    }\n\n    gameBoard[rowIndex] = movedRow;\n  }\n\n  if (moveMade) {\n    appendTile();\n  }\n  score += moveScore;\n\n  updateScore();\n  renderBoard();\n}\n\nfunction moveRight() {\n  moveMade = false;\n  isWinner();\n  isLoser();\n  moveScore = 0;\n\n  for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n    const newRow = gameBoard[rowIndex];\n\n    const reversedRow = newRow.slice().reverse();\n    const movedRow = move(reversedRow);\n    const finalRow = movedRow.reverse();\n\n    if (!arraysEqual(newRow, finalRow)) {\n      moveMade = true;\n    }\n\n    gameBoard[rowIndex] = finalRow;\n  }\n\n  if (moveMade) {\n    appendTile();\n  }\n\n  score += moveScore;\n\n  updateScore();\n  renderBoard();\n};\n\nfunction moveUp() {\n  moveMade = false;\n  isWinner();\n  isLoser();\n  moveScore = 0;\n\n  for (let columnIndex = 0; columnIndex < cells; columnIndex++) {\n    const newColumn = [\n      gameBoard[0][columnIndex],\n      gameBoard[1][columnIndex],\n      gameBoard[2][columnIndex],\n      gameBoard[3][columnIndex],\n    ];\n\n    const column = move(newColumn);\n\n    if (!arraysEqual(newColumn, column)) {\n      moveMade = true;\n    }\n\n    gameBoard[0][columnIndex] = column[0];\n    gameBoard[1][columnIndex] = column[1];\n    gameBoard[2][columnIndex] = column[2];\n    gameBoard[3][columnIndex] = column[3];\n  }\n\n  if (moveMade) {\n    appendTile();\n  }\n\n  score += moveScore;\n\n  updateScore();\n  renderBoard();\n};\n\nfunction moveDown() {\n  moveMade = false;\n  isWinner();\n  isLoser();\n  moveScore = 0;\n\n  for (let columnIndex = 0; columnIndex < cells; columnIndex++) {\n    const newColumn = [\n      gameBoard[3][columnIndex],\n      gameBoard[2][columnIndex],\n      gameBoard[1][columnIndex],\n      gameBoard[0][columnIndex],\n    ];\n\n    const column = move(newColumn);\n\n    if (!arraysEqual(newColumn, column)) {\n      moveMade = true;\n    }\n\n    gameBoard[3][columnIndex] = column[0];\n    gameBoard[2][columnIndex] = column[1];\n    gameBoard[1][columnIndex] = column[2];\n    gameBoard[0][columnIndex] = column[3];\n  }\n\n  if (moveMade) {\n    appendTile();\n  }\n\n  score += moveScore;\n\n  updateScore();\n  renderBoard();\n};\n\nfunction arraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction keyHandler(keyEvent) {\n  const keyActions = {\n    ArrowLeft: moveLeft,\n    ArrowRight: moveRight,\n    ArrowUp: moveUp,\n    ArrowDown: moveDown,\n  };\n\n  const action = keyActions[keyEvent.code];\n\n  if (action) {\n    action();\n  }\n}\n"]}